using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using KrnlAPI;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;
using System.Net;
using Microsoft.Win32;
using SV_Reworked__SUI_;

namespace SV_Rework
{
    public partial class Form1 : Form
    {

        

        

        public Form1()
        {
        
            InitializeComponent();
            MainAPI.Load();
            listBox1.Items.Clear();//Clear Items in the LuaScriptList
            PopulateListBox(listBox1, "./Scripts", "*.txt");
            PopulateListBox(listBox1, "./Scripts", "*.lua");
        }



        private void Form1_Load(object sender, EventArgs e)
        {
            MessageBox.Show("Loaded Press Ok To Continue");
        }

        private void siticoneButton6_Click(object sender, EventArgs e)
        {
            Application.Exit();
        }

        private void siticoneButton7_Click(object sender, EventArgs e)
        {
            WindowState = FormWindowState.Minimized;
        }

        private void siticoneButton5_Click(object sender, EventArgs e)
        {
            MainAPI.Execute(fastColoredTextBox1.Text);

        }

        private void siticoneButton1_Click(object sender, EventArgs e)
        {
            MainAPI.Inject();

        }

        private void siticoneButton2_Click(object sender, EventArgs e)
        {
            fastColoredTextBox1.Clear();
        }

        private void siticoneButton3_Click(object sender, EventArgs e)
        {

            SaveFileDialog sfd = new SaveFileDialog();
            sfd.Filter = "Txt Files (*.txt)|*.txt|Lua Files (*.lua)|*.lua|All Files (*.*)|*.*";
            if (sfd.ShowDialog() == DialogResult.OK)

                {
                Stream s = sfd.OpenFile();
                StreamWriter sw = new StreamWriter(s);
                sw.Write(fastColoredTextBox1.Text);
                sw.Close();
            }




        }


        public static void PopulateListBox(ListBox lsb, string Folder, string FileType)
        {
            DirectoryInfo dinfo = new DirectoryInfo(Folder);
            FileInfo[] Files = dinfo.GetFiles(FileType);
            foreach (FileInfo file in Files)
            {
                lsb.Items.Add(file.Name);
            }
        }

        private void siticoneButton4_Click(object sender, EventArgs e)
        {
            listBox1.Items.Clear();//Clear Items in the LuaScriptList
            PopulateListBox(listBox1, "./Scripts", "*.txt");
            PopulateListBox(listBox1, "./Scripts", "*.lua");
        }

        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (listBox1.SelectedItem == null)
            {


                MessageBox.Show("File Doesnt Exist!");

            }
            else
            {

                fastColoredTextBox1.Text = File.ReadAllText($"./Scripts/{listBox1.SelectedItem}");
            
            }
            
        }



        private void siticoneCheckBox1_CheckedChanged(object sender, EventArgs e)
        {


            if (siticoneCheckBox1.Checked)
                this.TopMost = true;
            else
                this.TopMost = false;


        }

        private void timer1_Tick(object sender, EventArgs e)
        {
            if (MainAPI.IsAttached() == true)
            {
                label4.Text = ("Attached!");
            }
            else
            {
                label4.Text = ("Not Attached!");
            }
        }

        private async void siticoneButton8_Click(object sender, EventArgs e)
        {
            MessageBox.Show("U are about to load test ui", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            await Task.Delay(400);

            SUI_Loader UI = new SUI_Loader();
            UI.Show();

            this.Hide();

            


        }
    }
}
